/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  DinoCreate: { // input type
    level: number; // Int!
    name?: string | null; // String
    variant: NexusGenEnums['Variant']; // Variant!
  }
  DinoFilter: { // input type
    arena?: NexusGenEnums['Arena'] | null; // Arena
    take: number; // Int!
    variant?: NexusGenEnums['Variant'] | null; // Variant
  }
  SearchByID: { // input type
    id: string; // ID!
  }
}

export interface NexusGenEnums {
  Arena: "DESERT" | "GRASSLAND" | "HILLS" | "OCEAN" | "URBAN"
  Variant: "aardonyx" | "abelisaurus" | "alosaur"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Dino: { // root type
    arena: NexusGenEnums['Arena']; // Arena!
    attack: number; // Float!
    hp: number; // Float!
    id: string; // ID!
    level: number; // Int!
    name: string; // String!
    variant: NexusGenEnums['Variant']; // Variant!
  }
  Mutation: {};
  NewDino: { // root type
    dino: NexusGenRootTypes['Dino']; // Dino!
  }
  Query: {};
  Unauthorized: { // root type
    operation: string; // String!
  }
}

export interface NexusGenInterfaces {
  Identifiable: NexusGenRootTypes['Dino'];
}

export interface NexusGenUnions {
  CreateDino: NexusGenRootTypes['NewDino'] | NexusGenRootTypes['Unauthorized'];
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects & NexusGenUnions

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Dino: { // field return type
    arena: NexusGenEnums['Arena']; // Arena!
    attack: number; // Float!
    damage: number; // Float!
    hp: number; // Float!
    id: string; // ID!
    level: number; // Int!
    name: string; // String!
    variant: NexusGenEnums['Variant']; // Variant!
  }
  Mutation: { // field return type
    createDino: NexusGenRootTypes['CreateDino']; // CreateDino!
    createRandomDino: NexusGenRootTypes['CreateDino']; // CreateDino!
  }
  NewDino: { // field return type
    dino: NexusGenRootTypes['Dino']; // Dino!
  }
  Query: { // field return type
    dinosaur: NexusGenRootTypes['Dino'] | null; // Dino
    dinosaurs: NexusGenRootTypes['Dino'][]; // [Dino!]!
  }
  Unauthorized: { // field return type
    operation: string; // String!
  }
  Identifiable: { // field return type
    id: string; // ID!
  }
}

export interface NexusGenFieldTypeNames {
  Dino: { // field return type name
    arena: 'Arena'
    attack: 'Float'
    damage: 'Float'
    hp: 'Float'
    id: 'ID'
    level: 'Int'
    name: 'String'
    variant: 'Variant'
  }
  Mutation: { // field return type name
    createDino: 'CreateDino'
    createRandomDino: 'CreateDino'
  }
  NewDino: { // field return type name
    dino: 'Dino'
  }
  Query: { // field return type name
    dinosaur: 'Dino'
    dinosaurs: 'Dino'
  }
  Unauthorized: { // field return type name
    operation: 'String'
  }
  Identifiable: { // field return type name
    id: 'ID'
  }
}

export interface NexusGenArgTypes {
  Dino: {
    damage: { // args
      arena: NexusGenEnums['Arena']; // Arena!
    }
  }
  Mutation: {
    createDino: { // args
      input: NexusGenInputs['DinoCreate']; // DinoCreate!
    }
  }
  Query: {
    dinosaur: { // args
      input: NexusGenInputs['SearchByID']; // SearchByID!
    }
    dinosaurs: { // args
      input: NexusGenInputs['DinoFilter']; // DinoFilter!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  CreateDino: "NewDino" | "Unauthorized"
  Identifiable: "Dino"
}

export interface NexusGenTypeInterfaces {
  Dino: "Identifiable"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = keyof NexusGenUnions;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "CreateDino" | "Identifiable";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}