# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Query {
  """Find a Dino by their ID"""
  dinosaur(input: SearchByID!): Dino

  """Get all dinosaurs"""
  dinosaurs(input: DinoFilter!): [Dino!]!

  """Get the current authenticated user"""
  me: User
}

type Dino implements Identifiable {
  """A unique ID for this entity"""
  id: ID!

  """The name of this Dinosaur"""
  name: String!

  """The variance for this Dinosaur"""
  variant: Variant!

  """The current level of this Dinosaur, which affects its attack and HP"""
  level: Int!

  """The current health of this Dinosaur"""
  hp: Float!

  """The attack for this class of Dinosaur"""
  attack: Float!

  """The speed for this class of Dinosaur"""
  speed: Float!

  """The amount of healing this class Dinosaur gain when resting"""
  healing: Float!

  """The price of this dinosaur"""
  price: Float!

  """The arena environment this Dinosaur most effective in"""
  arena: Arena!

  """The damage dealt by this Dinosaur"""
  damage(arena: Arena!): Float!

  """The max hp of this Dinosaur"""
  maxHp: Float!

  """The hp percentage of this Dinosaur"""
  percentage: Float!
}

interface Identifiable {
  """A unique ID for this entity"""
  id: ID!
}

"""The variant of dinosaur"""
enum Variant {
  """Jumping expert"""
  blue

  """Bold comes in black"""
  black

  """Runs swiftly"""
  green

  """Ouch.."""
  pink

  """A good offense in the best defense"""
  red

  """Boom"""
  slate

  """Jack of all trades"""
  white

  """Can't lose if you don't get hit"""
  yellow
}

"""The battlefield environment"""
enum Arena {
  GRASSLAND
  HILLS
  OCEAN
  URBAN
  DESERT
}

input SearchByID {
  """A unique ID for this entity"""
  id: ID!
}

"""Filter argument(s) for Dino(s)"""
input DinoFilter {
  """The variant of one or many Dino(s)"""
  variant: Variant

  """The arena of choice of one or many Dino(s)"""
  arena: Arena

  """The limit of result to take"""
  take: Int! = 20
}

type User implements Identifiable {
  """A unique ID for this entity"""
  id: ID!

  """Get all Dinosaur in this user's party"""
  party: [Dino!]!

  """Get all Dinosaur in this user's party"""
  box: [Dino!]!

  """True if the user has a full party"""
  hasFullParty: Boolean!
}

type Mutation {
  """Create a Dino"""
  createDino(input: DinoCreate!): CreateDino!

  """Create a randomly generated Dino"""
  createRandomDino: CreateDino!
}

"""Create Dino mutation result"""
union CreateDino = Unauthorized | NewDino

"""An operation is made by an unauthorized user"""
type Unauthorized {
  """What operation is done that caused an unauthorized error"""
  operation: String!
}

"""New Dino has been created"""
type NewDino {
  """The new Dino created"""
  dino: Dino!
}

"""Filter argument(s) for Dino(s)"""
input DinoCreate {
  """The variant of one or many Dino(s)"""
  variant: Variant!

  """The name of this Dinosaur"""
  name: String

  """The current level of this Dinosaur, which affects its attack and HP"""
  level: Int! = 1
}