# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Query {
  """Find a Dino by their ID"""
  dinosaur(input: SearchByID!): Dino

  """Get the current authenticated user"""
  me: User
}

"""A dinosaur"""
type Dino implements Identifiable {
  """A unique ID for this entity"""
  id: ID!

  """The name of this Dinosaur"""
  name: String!

  """The variance for this Dinosaur"""
  variant: Variant!

  """The current level of this Dinosaur, which affects its attack and HP"""
  level: Int!

  """The current health of this Dinosaur"""
  hp: Float!

  """The attack for this class of Dinosaur"""
  attack: Float!

  """The speed for this class of Dinosaur"""
  speed: Float!

  """The amount of healing this class Dinosaur gain when resting"""
  healing: Float!

  """The price of this dinosaur"""
  price: Float!

  """The arena environment this Dinosaur most effective in"""
  arena: Arena!

  """The damage dealt by this Dinosaur"""
  damage(arena: Arena!): Float!

  """The max hp of this Dinosaur"""
  maxHp: Float!

  """The hp percentage of this Dinosaur"""
  percentage: Float!
}

interface Identifiable {
  """A unique ID for this entity"""
  id: ID!
}

"""The variant of dinosaur"""
enum Variant {
  """Jumping expert"""
  blue

  """Bold comes in black"""
  black

  """Runs swiftly"""
  green

  """Ouch.."""
  pink

  """A good offense in the best defense"""
  red

  """Boom"""
  slate

  """Jack of all trades"""
  white

  """Can't lose if you don't get hit"""
  yellow
}

"""The battlefield environment"""
enum Arena {
  GRASSLAND
  HILLS
  OCEAN
  URBAN
  DESERT
}

input SearchByID {
  """A unique ID for this entity"""
  id: ID!
}

"""A valid user of the game"""
type User implements Identifiable {
  """A unique ID for this entity"""
  id: ID!

  """The current arena the user is in"""
  location: Arena!

  """The amount of money owned by the user"""
  cash: Int!

  """Get all Dinosaur in this user's party"""
  party: [Dino!]!

  """Get all Dinosaur in this user's box"""
  box: [Dino!]!

  """True if the user has a full party"""
  hasFullParty: Boolean!

  """Get all Items in this user's inventory"""
  inventory: [Item!]!
}

"""A usable item in a player's inventory"""
type Item implements Identifiable {
  """A unique ID for this entity"""
  id: ID!

  """The type of item"""
  variant: Consumable!
}

"""Types of consumable items"""
enum Consumable {
  """Increase level by 1"""
  icecream

  """Heal to full health"""
  meal

  """Heal by 40% of the max HP"""
  berry

  """Heal 200 HP"""
  potion

  """Reset stats and Heal 20% of max HP"""
  milk

  """Adds 150 HP (No limit)"""
  powder

  """Increase Healing by 5%"""
  burger

  """Increase Attack by 5%"""
  chocolate

  """Increase Speed by 5%"""
  soda

  """Increase Healing and Attack by 1%"""
  cupcake
}

type Mutation {
  """Start a random quest"""
  quest: Quest!

  """Create a Dino"""
  createDino(input: DinoCreate!): CreateDino!

  """Create a randomly generated Dino"""
  crackAnEgg: CreateDino!

  """Rename a dinosaur"""
  renameDino(input: DinoRename!): AuthIndicatorReply!

  """Switch 2 dino around"""
  switchDino(input: DinoSwitch!): AuthIndicatorReply!

  """Put a dino from party to the box"""
  putDinoToBox(input: ID!): AuthIndicatorReply!

  """Put a dino from box to the party"""
  addDinoToParty(input: ID!): AuthIndicatorReply!

  """Sell a dino and earn money back"""
  sellDino(input: ID!): AuthIndicatorReply!

  """Buy an item"""
  buyItem(input: ItemBuy!): AuthIndicatorReply!

  """Use an item on a dino"""
  useItem(input: ItemUse!): AuthIndicatorReply!

  """Log into a user with the given credentials"""
  login(input: LoginInfo!): Login!
}

"""Quest results"""
union Quest = Unauthorized | Battle

"""An operation is made by an unauthorized user"""
type Unauthorized {
  """What operation is done that caused an unauthorized error"""
  operation: String!
}

"""Battle result and plan"""
type Battle {
  """Battle plan information"""
  plan: [BattleInfo!]!
}

"""Battle information"""
union BattleInfo = BattleInit | BattleTurn | BattleEnd

"""Initial battle information"""
type BattleInit {
  """The current details of your battling dino"""
  yours: Dino!

  """The current details of opponent's battling dino"""
  opponents: Dino!

  """The number of yours dino"""
  yoursRemaining: Float!

  """The number of opponent's dino"""
  opponentsRemaining: Float!
}

"""Turn information"""
type BattleTurn {
  """True if your dino is attacking, false otherwise"""
  attacking: Boolean!

  """The current details of your battling dino"""
  yours: Dino!

  """The current details of opponent's battling dino"""
  opponents: Dino!

  """The damage being dealt"""
  damage: Float!
}

"""Battle ending"""
type BattleEnd {
  """Whether you win or not"""
  win: Boolean!
}

"""Create Dino mutation result"""
union CreateDino = Unauthorized | NewDino | InputConstraint | Underfunded

"""New Dino has been created"""
type NewDino {
  """The new Dino created"""
  dino: Dino!
}

"""One of the input violates a constraint"""
type InputConstraint {
  """The field name that is violating constraint"""
  name: String!

  """The reason of violation"""
  reason: String!
}

"""An operation is blocked to lack of funds"""
type Underfunded {
  """Money owned"""
  owned: Float!

  """Money require"""
  required: Float!
}

"""Filter argument(s) for Dino(s)"""
input DinoCreate {
  """The variant of one or many Dino(s)"""
  variant: Variant!

  """The name of this Dinosaur"""
  name: String

  """The current level of this Dinosaur, which affects its attack and HP"""
  level: Int! = 1
}

"""Indicated reply that require authentication"""
union AuthIndicatorReply = Unauthorized | Indicator | InputConstraint

"""Indicator that an operation has done successfully something or not"""
type Indicator {
  """An indicator flag, true for something did happen, false otherwise"""
  flag: Boolean!
}

"""Input to rename a dinosaur"""
input DinoRename {
  """The id of a dinosaur"""
  id: ID!

  """The name value"""
  name: String!
}

"""Input to switch 2 dinosaur"""
input DinoSwitch {
  """One of the dino's id to be switched"""
  lhs: ID!

  """One of the dino's id to be switched"""
  rhs: ID!
}

"""Input for buying items"""
input ItemBuy {
  """The array of items to buy"""
  orders: [ItemOrder!]!
}

"""Input for buying a type of item"""
input ItemOrder {
  """The item to buy"""
  variant: Consumable!

  """The amount of item to buy"""
  amount: Int!
}

"""Input for using an item"""
input ItemUse {
  """The id of the item"""
  item: ID!

  """The id of the dino"""
  dino: ID!
}

"""Login result"""
union Login = Unauthorized | Credentials

"""User credentials"""
type Credentials {
  """User information"""
  user: User!

  """Token for this user"""
  token: String!
}

"""Information required for login"""
input LoginInfo {
  """A unique email for the user"""
  email: String!

  """Password to log in"""
  password: String!
}